---
 - name: start services
   gather_facts: no
   hosts: localhost

   vars:
       DOCKER_VERSION: "{{ lookup('env', 'petclinic') }}"

   tasks:
      # - name: Create a k8s namespace
      #   kubernetes.core.k8s:
      #     name: testing
      #     api_version: v1
      #     kind: Namespace
      #     state: present

      # - name: Kubectl apply
      #   kubernetes.core.k8s:
      #     name: testing
      #     state: present
      #     src: /home/myroslav/final_task/final/pod-my-cl-1.yaml
      # - name: Kubectl apply
      #   # shell: kubectl apply -f /home/myroslav/final_task/final/pod-my-cl-1.yaml     
      #   command: chdir=/home/myroslav/final_task/final kubectl apply -f pod-my-cl-1.yaml


      - name: Remove an existing Service object
        kubernetes.core.k8s:
          state: absent
          api_version: v1
          kind: Deployment
          namespace: testing
          name: web

      - name: Create a k8s namespace
        kubernetes.core.k8s:
          name: testing
          api_version: v1
          kind: Namespace
          # state: absent
          state: present

      - name: Create a Service object from an inline definition
        kubernetes.core.k8s:
          state: present
          # state: absent
          definition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              labels:
                app: petclinic
              name: petclinic
              namespace: testing
            spec:
              replicas: 2
              selector:
                matchLabels:
                  app: petclinic
              template:
                metadata:
                  labels:
                    app: petclinic
                spec:
                  containers:
                  - image: "{{ DOCKER_VERSION }}"
                  # - image: myroslavlevchyk/petclinic:latest
                    # imagePullPolicy: Always
                    name: petclinic
                    ports:
                    - containerPort: 8080

      - name: Create a LoadBalancer
        kubernetes.core.k8s:
          state: present
          # state: absent
          definition:
            apiVersion: v1
            kind: Service
            metadata:
              name: petclinic
              namespace: testing
            spec:
              selector:
                app: petclinic
              ports:
                - port: 8080
                  targetPort: 8080
              type: LoadBalancer


      # - name: Run script
      #   command: sh /tmp/aa.sh


      # - name: get cluster service 
      #   shell: kubectl get service --all-namespaces
      #   register: service

      # - debug: var=service


      # - name: Print Kubectl get service --all-namespaces
      #   shell: kubectl get service --all-namespaces
      #   register: playbook_path_output
      # - debug: var=playbook_path_output.stdout



      # - name: Create a Deployment by reading the definition from a local file
      #   kubernetes.core.k8s:
      #     state: present
      #     src: /home/myroslav/final_task/final/pod-my-cl-1.yaml

      # - name: Create a k8s namespace
      #   kubernetes.core.k8s:
      #     name: testing
      #     api_version: v1
      #     kind: Namespace
      #     state: absent
      #     # state: present

      # - name: Kubectl apply
      #   # shell: kubectl apply -f /home/myroslav/final_task/final/pod-my-cl-1.yaml     
      #   shell: pwd 


      # - name: Kubectl apply
      #   # shell: kubectl apply -f /home/myroslav/final_task/final/pod-my-cl-1.yaml     
      #   command: chdir=/home/myroslav/final_task/final kubectl apply -f pod-my-cl-1.yaml

      # - name: Create a Service object from an inline definition
      #   kubernetes.core.k8s:
      #     # state: absent           
      #     state: present
      #     definition:
      #       apiVersion: apps/v1
      #       kind: Deployment
      #       metadata:
      #         name: petclinic
      #         # namespace: testing
      #       spec:
      #         selector:
      #           matchLabels:
      #             app: petclinic
      #         replicas: 2 # tells deployment to run 2 pods matching the template
      #         template:
      #           metadata:
      #             labels:
      #               app: petclinic
      #           spec:
      #             containers:
      #             - name: petclinic
      #               image: myroslavlevchyk/petclinic:latest
      #       #        image: myroslavlevchyk/petclinic:3e5564e8835b72e7861ee20504726a264cc72cf3
      #               ports:
      #               - containerPort: 8080

      # - name: Create a Service object from an inline definition
      #   kubernetes.core.k8s:
      #     # state: present
      #     state: absent
      #     definition:
      #       apiVersion: apps/v1
      #       kind: Deployment
      #       metadata:
      #         labels:
      #           app: petclinic
      #         name: petclinic
      #         namespace: testing
      #       spec:
      #         replicas: 2
      #         selector:
      #           matchLabels:
      #             app: petclinic
      #         template:
      #           metadata:
      #             labels:
      #               app: petclinic
      #           spec:
      #             containers:
      #             - image: myroslavlevchyk/petclinic:latest
      #               # imagePullPolicy: Always
      #               name: petclinic
      #               ports:
      #               - containerPort: 8080


      # - name: Kubectl expose deployment petclinic --type=LoadBalancer --port=8080 --target-port=8080
      #   shell: chdir=~/final_task/final kubectl expose deployment petclinic --type=LoadBalancer --port=8080 --target-port=8080



            # apiVersion: v1
            # kind: Deployment
            # metadata:
            #   name: petclinic
            #   namespace: testing
            #   labels:
            #     app: petclinic
            #     # service: web
            # spec:
            #   containers:
            #   - name: petclinic
            #     image: myroslavlevchyk/petclinic:latest
            #   ports:
            #   - containerPort: 8080



# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: petclinic
# spec:
#   selector:
#     matchLabels:
#       app: petclinic
#   replicas: 2 # tells deployment to run 2 pods matching the template
#   template:
#     metadata:
#       labels:
#         app: petclinic
#     spec:
#       containers:
#       - name: petclinic
#         image: myroslavlevchyk/petclinic:latest
# #        image: myroslavlevchyk/petclinic:3e5564e8835b72e7861ee20504726a264cc72cf3
#         ports:
#         - containerPort: 8080



    #  - name: Kubectl apply
    #    shell: chdir=/home/myroslav kubectl apply -f /home/myroslav/final_task/final/pod-my-cl-1.yaml     
      #  shell: chdir=~/final_task/final kubectl apply -f pod-my-cl-1.yaml

    #  - name: Kubectl expose deployment petclinic --type=LoadBalancer --port=8080 --target-port=8080
    #    shell: chdir=~/final_task/final kubectl expose deployment petclinic --type=LoadBalancer --port=8080 --target-port=8080

    #  - name: Sleep 60
    #    shell: sleep 60

    #  - name: Kubectl get svc
    #    shell: kubectl get svc
    #    register: playbook_path_output
    #  - debug: var=playbook_path_output.stdout

    #  - name: Print IP
    #    shell: echo "IP " && kubectl get svc | awk '{print $4}'| tail -n1
    #    register: playbook_path_output
    #  - debug: var=playbook_path_output.stdout

    #  - name: Print Port
    #    shell: echo "Port " && kubectl get svc | awk '{print $5}'| tail -n1 | cut -d ":" -f 1
    #    register: playbook_path_output
    #  - debug: var=playbook_path_output.stdout
